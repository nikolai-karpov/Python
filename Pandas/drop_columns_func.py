import pandas as pd

melb_data = pd.read_csv('data/melb_data_ps.csv', sep=',')


# чтобы не переопределять переменную melb_data и тем самым не повредить первоначальный DataFrame, 
# создадим копию melb_df с помощью метода copy():
melb_df = melb_data.copy()


# За удаление строк и столбцов в таблице отвечает метод drop().
# labels — порядковые номера или имена столбцов, которые подлежат удалению; если их несколько, то передаётся список;
# axis — ось совершения операции, axis=0 — удаляются строки, axis=1 — удаляются столбцы;
# inplace — если параметр выставлен на True, происходит замена изначального DataFrame на новый, при этом метод ничего не возвращает; 
# если на False (всегда по умолчанию) — возвращается копия DataFrame без значений, подлежащих удалению, при этом первоначальный DataFrame не изменяется; 
# Удалим столбцы index и Coordinates из таблицы с помощью метода drop()
melb_df = melb_df.drop(['index', 'Coordinates'], axis=1)

# Альтернативный вариант:
#melb_df.drop(['index','Coordinates'],axis=1,inplace=True)


# создадим переменную total_rooms, в которой будем хранить общее количество комнат в здании. 
# Для этого выполним сложение столбцов с количеством комнат, ванн и спален:
total_rooms = melb_df['Rooms'] + melb_df['Bedroom'] + melb_df['Bathroom']


# введём признак MeanRoomsSquare, который соответствует средней площади одной комнаты для каждого объекта. 
# Для этого разделим площадь здания на полученное ранее общее количество комнат:
melb_df['MeanRoomsSquare'] = melb_df['BuildingArea'] / total_rooms
print(melb_df['MeanRoomsSquare'])


# Вводим — AreaRatio, коэффициент соотношения площади здания (BuildingArea) и площади участка (Landsize). 
# Для этого разницу двух площадей поделим на их сумму:
diff_area = melb_df['BuildingArea'] - melb_df['Landsize']
sum_area = melb_df['BuildingArea'] + melb_df['Landsize']
melb_df['AreaRatio'] = diff_area/sum_area

# Для пустырей — участков без строений — он будет равен -1, для домов без территории — 1, 
# во всех остальных случаях мы можем увидеть, какая площадь больше — здания или участка


# ниже вариантов кода выберите, который найдёт квадрат цены объекта недвижимости за наименьшее время и не выдаст ошибку
price_square = melb_df['Price'] **2


# Напишите функцию delete_columns(df, col=[]), которая удаляет столбцы из DataFrame и возвращает новую таблицу. 
# Если одного из указанных столбцов в таблице не существует, то функция должна возвращать None.
# Для удаления столбцов используется метод drop() с параметром axis=1. В него передаётся список столбцов, подлежащих удалению.


def delete_columns(df, col=[]):
    for cc in col:
        if cc not in df.columns:
            return None
    return df.drop(col, axis=1)


if __name__ == '__main__':
    customer_df = pd.DataFrame({
        'number': [0, 1, 2, 3, 4],
        'cust_id': [128, 1201, 9832, 4392, 7472],
        'cust_age': [13, 21, 19, 21, 60],
        'cust_sale': [0, 0, 0.2, 0.15, 0.3],
        'cust_year_birth': [2008, 2000, 2002, 2000, 1961],
        'cust_order': [1400, 14142, 900, 1240, 8430]
    })
    columns_for_delete= ['number', 'cust_age'] #выбранные вами столбцы
    new_df = delete_columns(customer_df, columns_for_delete)
    print(new_df)
    
    
# Рассчитайте среднюю плотность населения представленных стран (количество человек на квадратный километр). 
# Плотность населения рассчитывается как количество человек, проживающих на территории отдельной страны, делённое на площадь этой страны. 
# Обратите внимание, что население в таблице представлено в миллионах.
# Ответ округлите до сотых.

countries_df = pd.DataFrame({
    'country': ['Англия', 'Канада', 'США', 'Россия', 'Украина', 'Беларусь', 'Казахстан'],
    'population': [56.29, 38.05, 322.28, 146.24, 45.5, 9.5, 17.04],
    'square': [133396, 9984670, 9826630, 17125191, 603628, 207600, 2724902]
})


countries_df['density'] = countries_df['population'] / countries_df['square'] * 1e6
print(round(countries_df['density'].mean(), 2))


