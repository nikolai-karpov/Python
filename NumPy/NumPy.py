import numpy as np

print(np.float128)
# finfo(resolution=1e-18, min=-1.189731495357231765e+4932, max=1.189731495357231765e+4932, dtype=float128)


arr = np.arange(8)
# array([0, 1, 2, 3, 4, 5, 6, 7])


# Поменять форму массива
arr.shape = (2, 4)
# array([[0, 1, 2, 3],
#        [4, 5, 6, 7]])


# Чтобы оставить исходный массив без изменений и дополнительно получить новый массив новой формы,
# нужно использовать функцию reshape.
arr_new = arr.reshape((2, 4))

# array([[0, 1, 2, 3],
#       [4, 5, 6, 7]])
# У функции reshape есть дополнительный именованный аргумент order.
# Если order='C' (по умолчанию), массив заполняется по строкам, как в примере выше.
# Если order='F', массив заполняется числами по столбцам:


print(None == None)
# True
print(np.nan == np.nan)
# False
print(None is None)
# True
print(np.nan is np.nan)
# True
print(np.nan is None)
# False


# ЗАПОЛНЕНИЕ НОВЫХ МАССИВОВ
# Массив из нулей создаётся функцией np.zeros.
# Она принимает аргументы shape (обязательный) — форма массива (одно число или кортеж)
# и dtype (необязательный) — тип данных, который будет храниться в массиве.

zeros_1d = np.zeros(5)
# array([0., 0., 0., 0., 0.])


zeros_3d = np.zeros((5,4,3), dtype=np.float32)
print(zeros_3d.shape)
# (5, 4, 3)


#  функцией для создания одномерных массивов является arange
# её сигнатура: arange([start,] stop, [step,], dtype=None).
# Создадим массив от 2.5 до 5 с шагом 0.5 и с типом float16:

np.arange(2.5, 5, 0.5, dtype=np.float16)
# array([2.5, 3. , 3.5, 4. , 4.5], dtype=float16)


# генерирует трёхмерный массив случайных целых чисел от 1 до 100 (включительно)
# Трёхмерный массив из таблиц чисел формы 5х5, то есть итоговая форма — (3 мерности, 5 строк, 5 столбцов)
arr = np.random.randint(1, 101, size=(3, 5, 5))

# array([[[ 35,  66,  38,  11,  32],
#       [ 32,   7,  37,  83,  42],
#       [ 89,  37,  19,  51,  89],
#       [ 70, 100,  83,   5,  11],
#       [ 20,  13,  60,  26,  41]],
# 
#      [[ 23,  49,  76,  44,  43],
#       [ 59,  63,  99,  92,   2],
#       [ 83,   4,  25,  73,  19],
#       [ 10,  18,  40,  11,  21],
#       [ 58,  45,  73,  93,  61]],
# 
#      [[100,  88,  70,  34,  51],
#       [  5,  35,  36,  85,  88],
#       [ 72,  23,  87,  30,  40],
#       [ 29,  21,  51,  73,  81],
#       [ 91,  19,  87,  60,  27]]])
